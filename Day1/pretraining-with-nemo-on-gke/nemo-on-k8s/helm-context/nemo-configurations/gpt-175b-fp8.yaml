run:
  name: gpt3_175b
  results_dir: ${base_results_dir}/${.name}
  time_limit: "26-00:00:00"
  dependency: "singleton"

trainer:
  devices: 8
  accelerator: gpu
  precision: bf16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: null
  max_steps: 100 # consumed_samples = global_step * global_batch_size
  max_time: "25:23:00:00"
  log_every_n_steps: 1
  val_check_interval: 100
  limit_val_batches: 20
  limit_test_batches: 20
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
exp_manager:
  exp_dir: null
  name: megatron_gpt
  create_wandb_logger: false
  wandb_logger_kwargs:
    project: nemo_gpt3
    name: ${run.name}
  resume_if_exists: false 
  resume_ignore_no_checkpoint: true
  create_checkpoint_callback: false
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 5
    mode: min
    always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
    save_nemo_on_train_end: False # not recommended when training large models on clusters with short time limits
    filename: 'megatron_gpt--{val_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}
  log_step_timing: True
  step_timing_kwargs:
    sync_cuda: True
    buffer_size: 5

model:
  micro_batch_size: 1
  global_batch_size: 2048
  context_parallel_size: 1
  tensor_model_parallel_size: 4
  pipeline_model_parallel_size: 8
  virtual_pipeline_model_parallel_size: 2 # interleaved pipeline, set to maximum
  resume_from_checkpoint: null # manually set the checkpoint file to load from
  # model architecture
  encoder_seq_length: 2048
  max_position_embeddings: 2048
  num_layers: 96
  hidden_size: 12288
  ffn_hidden_size: ${multiply:4, ${.hidden_size}}  # Transformer FFN hidden size. 4 * hidden_size.
  num_attention_heads: 96
  init_method_std: 0.006  # Standard deviation of the zero mean normal distribution used for weight initialization.')
  hidden_dropout: 0.1  # Dropout probability for hidden state transformer.
  attention_dropout: 0.1
  kv_channels: null  # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
  layernorm_epsilon: 1e-5
  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: True # add embedding
  post_process: True # add pooler
  persist_layer_norm: True # Use of persistent fused layer norm kernel.
  gradient_as_bucket_view: True # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)

  # Fusion
  grad_div_ar_fusion: True # Fuse grad division into torch.distributed.all_reduce
  gradient_accumulation_fusion: True # Fuse weight gradient accumulation to GEMMs
  bias_activation_fusion: True # Use a kernel that fuses the bias addition from weight matrices with the subsequent activation function.
  bias_dropout_add_fusion: True # Use a kernel that fuses the bias addition, dropout and residual connection addition.
  masked_softmax_fusion: True # Use a kernel that fuses the attention softmax with it's mask.

  # FSDP
  fsdp: False # Enable training with torch FSDP.
  fsdp_sharding_strategy: 'full' # Method to shard model states. Available options are 'full', 'hybrid', and 'grad'.
  fsdp_grad_reduce_dtype: 32 # Gradient reduction data type.
  fsdp_sharded_checkpoint: False # Store and load FSDP shared checkpoint.
  
  ## Activation Checkpointing
  activations_checkpoint_granularity: null # 'selective' or 'full'
  activations_checkpoint_method: null # 'uniform', 'block'
  activations_checkpoint_num_layers: null
  num_micro_batches_with_partial_activation_checkpoints: null
  activations_checkpoint_layers_per_pipeline: null

  ## Sequence Parallelism
  sequence_parallel: True
  
  num_query_groups: null # Number of query groups for group query attention. If None, normal attention is used.

  tokenizer:
    library: 'megatron'
    type: 'GPT2BPETokenizer'
    model: null
    delimiter: null # only used for tabular tokenizer
    vocab_file: gpt2-vocab.json
    merge_file: gpt2-merges.txt 

  # precision
  native_amp_init_scale: 4294967296 # 2 ** 32
  native_amp_growth_interval: 1000
  hysteresis: 2 # Gradient scale hysteresis
  fp32_residual_connection: False # Move residual connections to fp32
  fp16_lm_cross_entropy: False # Move the cross entropy unreduced loss calculation for lm head to fp16

  # Megatron O2-style half-precision
  megatron_amp_O2: True # Enable O2-level automatic mixed precision using master parameters
  grad_allreduce_chunk_size_mb: 125

  ## Network
  sharp: False # Enable the use of SHARP for NCCL data-parallel communications. This is going to be ignored if the network doesn't support SHARP.

  ## Using Megatron Core
  mcore_gpt: True

  ## Transformer Engine
  # To use fp8, please set `transformer_engine=True` and `fp8=True`.
  # The rest of fp8 knobs are set for the fp8 training mode, which are ignored in non-fp8 training
  transformer_engine: True
  fp8: True # enables fp8 in TransformerLayer forward
  fp8_e4m3: False # sets fp8_format = recipe.Format.E4M3
  fp8_hybrid: True # sets fp8_format = recipe.Format.HYBRID
  fp8_margin: 0 # scaling margin
  fp8_interval: 1 # scaling update interval
  fp8_amax_history_len: 1024 # Number of steps for which amax history is recorded per tensor
  fp8_amax_compute_algo: max # 'most_recent' or 'max'. Algorithm for computing amax from history
  fp8_wgrad: True
  ub_tp_comm_overlap: False
  tp_comm_atomic_ag: False
  tp_comm_atomic_rs: False

  # miscellaneous
  seed: 1234
  sync_batch_comm: False
  use_cpu_initialization: False # Init weights on the CPU (slow for large models)
  onnx_safe: False # Use work-arounds for known problems with Torch ONNX exporter.
  apex_transformer_log_level: 30 # Python logging level displays logs with severity greater than or equal to this
  overlap_p2p_comm: True # Overlap p2p communication with computes
  batch_p2p_comm: False # Batch consecutive inter-peer send/recv operations

  # Nsys profiling options
  nsys_profile:
    enabled: False
    trace: [nvtx,cuda]
    start_step: 10  # Global batch to start profiling
    end_step: 10 # Global batch to end profiling
    ranks: [0] # Global rank IDs to profile
    gen_shape: False # Generate model and kernel details including input shapes

  optim:
    name: distributed_fused_adam
    bucket_cap_mb: 220
    overlap_grad_sync: True
    overlap_param_sync: true
    contiguous_grad_buffer: True
    grad_sync_dtype: bf16
    lr: 0.9e-4
    weight_decay: 0.1 
    betas: 
    - 0.9
    - 0.95
    sched:
      name: CosineAnnealing
      warmup_steps: 115
      constant_steps: 12500
      min_lr: 0.9e-5

  data:
    data_impl: mmap
    splits_string: "90,8,2"
    seq_length: 2048
    skip_warmup: True
    num_workers: 2
    exchange_indices_distributed: true
    dataloader_type: single # cyclic
    reset_position_ids: False # Reset position ids after end-of-document token
    reset_attention_mask: False # Reset attention mask after end-of-document token
    eod_mask_loss: False # Mask loss for the end of document tokens

